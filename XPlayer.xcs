// xlang

using {
	FileStream ;  
    FileSystem ;
};

class MainDialog : QXDialog{
	QXPushButton btnOk, btnLeft, btnRight, btnHide, btnStop, btnSetting;
    QXLabel labStatus, vlabel;
	XVideoSurface surface = new XVideoSurface();
	Setting setdlg = new Setting();
    QXProgressBar volume = new QXProgressBar();
    MediaBuffer mb = new MediaBuffer();
              
	AVCodeC codec = new AVCodeC(mb);
        
    ControlPane pane = new ControlPane();
	//wdgControl
    QXTreeView treeWidget;

	JsonObject actlist;
    
    String szduration;
    
    bool bStop = true;
    
    QXWidget  qcontrol;
    
    static class ContextMenu{
		QXMenu contextMenu = new QXMenu();
		QXAction [] actions;
		
		void create(QXWidget parent, String [] acts, onEventListener listener){
			if (contextMenu.create(parent)){
				actions = new QXAction[acts.length];
				for (int i = 0; i < acts.length; i ++){
					QXAction action = new QXAction();
					if (action.create(contextMenu)){
						
						if (acts[i].equals("-")){
							action.setSeparator(true);
						}else{	
                            if (acts[i].startWith("*")){
								action.setText(acts[i].substring(1, acts[i].length()));
                                action.setCheckable(true);
                            }else{
								action.setText(acts[i]);
                            }
							
							action.setOnEventListener(listener);
						}
					}
					actions[i] = action;
				}
				parent.setContextMenuPolicy(ActionsContextMenu);
				parent.addActions(actions);
			}
		}
	};
    
   
    
    
    class SubCanvas : QXWidget{
    
		bool onKeyPress(int key,bool repeat,int count,String text,int scanCode,int virtualKey,int modifier)override{
			keyPress(this, key, modifier);	
            return true;
		}

		bool onClose()override{
			hide();
            surface.restoreCanvas(this);
            return false;
		}
    };
    
    class VideoContextMenu : onEventListener{
		   String lastfile = "";
           
           ContextMenu _contextMenu = new ContextMenu();
           
           void create(QXWidget parent, String [] acts){
				_contextMenu.create(parent,acts,this);
           }
           
		   void onTrigger(QXObject obj) override{
				if (obj == _contextMenu.actions[0]){
					String file = QXFileDialog.getOpenFileName("打开媒体文件",lastfile,"*.*",MainDialog.this);
                    if (file != nilptr && file.length() > 0){
						lastfile = file;
						openMedia(file, file.findFilenameAndExtension());
                    }
                    return ;
                }
                
                if (obj == _contextMenu.actions[1]){
					openForDialog();
                    return ;
                }
                if (obj == _contextMenu.actions[4]){
					dostop();
                    return ;
                }
                if (obj == _contextMenu.actions[3]){
					dopause();
                    return ;
                }
                
                if (obj == _contextMenu.actions[5]){
					surface.rotate(90);
                    return ;
                }
                
                if (obj == _contextMenu.actions[7]){
					doFullScreen();
                }
                
                if (obj == _contextMenu.actions[9]){
					bool bc = ((QXAction)obj).getChecked();
                    checkMenu(10, false);
                    checkMenu(9, bc);
					setRenderSetting(bc ? 1 : 0);
                }
                
                if (obj == _contextMenu.actions[10]){
					bool bc = ((QXAction)obj).getChecked();
                    checkMenu(10, bc);
                    checkMenu(9, false);
					setRenderSetting(bc ? 2 : 0);
                }
                
                if (_contextMenu.actions.length > 11){
					if (obj == _contextMenu.actions[11]){
						fullWidget.hide();
						surface.restoreCanvas(fullWidget);
					}
                }
		   }
	};
        
        
    void checkMenu(int n, bool b){
        mainMenu._contextMenu.actions[n].setChecked(b);
        
        if (fullWidget != nilptr){
			fullwidMenu._contextMenu.actions[n].setChecked(b);
        }
    }
    
    VideoContextMenu mainMenu, fullwidMenu;
    
    void createContextMenu(QXWidget window){
		mainMenu= new VideoContextMenu();
        String []acts = {"打开文件", "打开网络地址", "-", "暂停/播放", "停止", "画面旋转90°", "-", "全屏", "-", "*保持画面比例", "*原始画面尺寸"};
        mainMenu.create(window, acts);
    }
    
    void createSurfaceContextMenu(QXWidget window){
		fullwidMenu = new VideoContextMenu();
        String []acts = {"打开文件", "打开网络地址", "-", "暂停/播放", "停止", "画面旋转90°", "-", "全屏", "-", "*保持画面比例", "*原始画面尺寸", "退出全屏"};
        fullwidMenu.create(window, acts);
        
        //全屏画面的菜单 禁用掉全屏功能
        fullwidMenu._contextMenu.actions[7].setEnable(false);
        
        //同步勾选状态
        fullwidMenu._contextMenu.actions[9].setChecked(mainMenu._contextMenu.actions[9].getChecked());
        fullwidMenu._contextMenu.actions[10].setChecked(mainMenu._contextMenu.actions[10].getChecked());
    }
    
    SubCanvas fullWidget = nilptr;
    void doFullScreen(){
		if (fullWidget == nilptr){
			fullWidget = new SubCanvas();
			fullWidget.setOnMouseEventListener(volumelis);
			fullWidget.create();
            createSurfaceContextMenu(fullWidget);
		}
		//fullWidget.show();
		
		
		surface.switchCanvas(fullWidget);
		fullWidget.showFullScreen();
		return ;
    }
    
	bool onKeyPress(int key,bool repeat,int count,String text,int scanCode,int virtualKey,int modifier)override{
		return keyPress(this, key, modifier);	
	}
        
    bool keyPress(QXObject obj, int key, int modifier){
		if (modifier == NoModifier){
			switch(key){
				case Key_Left:
				codec.seek(mb.getPosition() - 5000);
				break;
				case Key_Right:
				codec.seek(mb.getPosition() + 5000);
				break;
				case Key_Space:
				dopause();
				break;
				case QXWidget.Key_Escape:
                if (obj == fullWidget){
					fullWidget.hide();
					surface.restoreCanvas(fullWidget);
                }else{
					return false;
                }
				break;
				case Key_MediaTogglePlayPause:
					dopause();
				break;
			}
        }else
        if (modifier == AltModifier){
			switch(key){
				case Key_Enter:
				case Key_Return:
					doFullScreen();
				break;
			}
        }
        return true;
    }
    
    
	onKeyEventListener keylistener = new onKeyEventListener(){
		bool onKeyPress(QXObject obj,int key,bool repeat,int count,String text,int scanCode,int virtualKey,int modifier)override{
			return keyPress(obj, key, modifier);
		}
    };
    
    
    
    Map<long, String> urisMap = new Map<long, String>();
    
    void loadAct(){
		File fp = new File(_system_.getAppDirectory().appendPath("actlist.cfg"));
        try{
			FileInputStream fis = new FileInputStream(fp);
            byte [] data = fis.read();
            String content = new String(data) ;
            
            actlist = new JsonObject(content);
            
            JsonArray list = (JsonArray)actlist.get("list");
            
            long root = treeWidget.addItem(nilptr,"节目表");
            
            for (int i =0, c = list.length(); i < c; i++){
				JsonObject item = (JsonObject)list.get(i);
                long hitem = treeWidget.insertItem(root,nilptr,item.getString("name"));
                
                JsonArray jcontent = (JsonArray)item.get("content");
                
                for (int x = 0, jc = jcontent.length(); x < jc; x++){
					JsonObject act = (JsonObject)jcontent.get(x);
					long hsub = treeWidget.insertItem(hitem,nilptr,act.getString("label"));
                    urisMap.put(hsub, act.getString("uri"));
                }
                
            }
        }catch(Exception e){
        
        
        }
        
    }
    
     String formatTime(long ms){
		int h = (ms / (1000 * 60 * 60));
        int m = ((ms %(1000 * 60 * 60)) / (1000 * 60));
        int s = ((ms %(1000 * 60)) / (1000));
		return String.format("%d:%02d:%02d", h, m, s);
     }
    
    XVideoSurface.playProgressListener playStatusListener = new XVideoSurface.playProgressListener(){
		long lastpos = 0;
		void onProgress(long pos, long duration){
			pos = ((int)(pos / 1000)) * 1000;
            if (pos != lastpos){
				lastpos = pos;
				pane.setPosition(pos);
				runOnUi(new Runnable(){
					void run()override{
						if (bStop == false){
							labStatus.setText(formatTime(pos) + "/" + szduration);
						}
					}            
				});
            }
		}
    };
    
    void setRenderSetting(int n){
		surface.setRenderSetting(n);
    }
    
    
	void onReject()override{
		return ;
	}


    bool onClose()override{
		dostop();
        return true;
    }
    
    void dopause(){
		bool b = surface.isPaused();
		surface.setPause(!b);
		btnOk.setCheck(!b);
    }
    
    void dostop(){
		if (bStop == false){
			labStatus.show();
			synchronized(MainDialog.this){
				bStop = true;
				labStatus.setText("正在停止...");
				
				surface.stop();
				mb.stop();
				
				codec.stop();
				
				pane.stop();
				MainDialog.this.notify();
				MainDialog.this.wait();
			}
			
			labStatus.setText("已停止");
            setWindowTitle("XPlayer");
			pane.setPosition(0);
		}    
    }
    
    onMouseEventListener volumelis = new onMouseEventListener(){
		
		bool bdown = false;
		
		void onWheel(QXObject obj,int button,int x,int y,int Orientation,int delta,bool inverted)override{
			double fzoom = surface.getVolumeZoom();
			if (delta > 0){
				fzoom += 0.01;
			}else{
				fzoom -= 0.01;
			}
			fzoom = Math.min(1.5f,Math.max(0.f,fzoom));
			volume.setValue(fzoom * 100);
			surface.setVolumeZoom(fzoom);
			if (fzoom >= 1.01f){
				vlabel.setText(String.format("<a style=\"color:#ff0000\">音量:%d %%</a>", (int)(fzoom * 100)));
			}else{
				vlabel.setText(String.format("音量:%d %%", (int)(fzoom * 100)));
			}
			volume.update();
		}


		void onMouseMove(QXObject obj,int Button,int x,int y,int flags,int source)override{
			if (obj != volume){
				return ;
            }
			if (bdown){
				double fzoom = (double)x / (double)volume.width();
				fzoom = Math.min(1.5f,Math.max(0.f,fzoom));
				volume.setValue(fzoom * 100);
				surface.setVolumeZoom(fzoom);
			if (fzoom >= 1.01f){
				vlabel.setText(String.format("<a style=\"color:#ff0000\">音量:%d %%</a>", (int)(fzoom * 100)));
			}else{
				vlabel.setText(String.format("音量:%d %%", (int)(fzoom * 100)));
			}
				volume.update();
			}
		}


		void onMouseButtonRelease(QXObject obj,int Button,int x,int y,int flags,int source)override{
			if (obj != volume){
				return ;
            }
			double fzoom = (double)x / (double)volume.width();
			fzoom = Math.min(1.5f,Math.max(0.f,fzoom));
			volume.setValue(fzoom * 100);
			bdown = false;
			surface.setVolumeZoom(fzoom);
			if (fzoom >= 1.01f){
				vlabel.setText(String.format("<a style=\"color:#ff0000\">音量:%d %%</a>", (int)(fzoom * 100)));
			}else{
				vlabel.setText(String.format("音量:%d %%", (int)(fzoom * 100)));
			}
			volume.update();
		}


		void onMouseButtonPress(QXObject obj,int Button,int x,int y,int flags,int source)override{
			if (obj != volume){
				if (obj == surface.paintUpdate){
					if (Button == 1){
						surface.switch_efficer();
                    }else{
						showContextMenu();
                    }
                }
				return ;
            }
			bdown = true;
		}
	};
	
    
    void showContextMenu(){
    
    }
    
    
	bool create()override{
		QXBuffer qb = new QXBuffer();
        byte [] buffer = __xPackageResource("ui/dialog.ui");
        qb.setBuffer(buffer, 0, buffer.length);
        
		if (load(qb)){
			
			setWindowFlags(Window);
            setWindowIcon("./res/toolbar/logo.png");
            btnStop = (QXPushButton)attachByName(new QXPushButton(), "btnStop");
			btnOk = (QXPushButton)attachByName(new QXPushButton(), "btnOk");
            btnLeft = (QXPushButton)attachByName(new QXPushButton(), "btnLeft");
            btnRight = (QXPushButton)attachByName(new QXPushButton(), "btnRight");
            btnSetting = (QXPushButton)attachByName(new QXPushButton(), "btnSetting");
            btnHide = (QXPushButton)attachByName(new QXPushButton(), "btnHide");
            treeWidget = (QXTreeView)attachByName(new QXTreeView(), "treeWidget");
            labStatus = (QXLabel)attachByName(new QXLabel(), "labStatus");
            vlabel = (QXLabel)attachByName(new QXLabel(), "vlabel");
			volume = (QXProgressBar)attachByName(volume, "volume");
            qcontrol = (QXWidget)attachByName(new QXWidget(), "qcontrol"); 
            //widTitle = (QXWidget)attachByName(new QXWidget(), "widTitle");
            
            /*qcontrol.hide();
            widTitle.hide();*/
			attachByName(surface, "surface");
            attachByName(pane, "wdgControl");
            treeWidget.hide();
            pane.init();
            
            
            /*surface.create(this);
                        
            surface.move(0,0);
            surface.show();*/
            btnOk.move(560,0);
            
            setOnKeyEventListener(keylistener);
            btnOk.setOnKeyEventListener(keylistener);
            btnLeft.setOnKeyEventListener(keylistener);
            btnRight.setOnKeyEventListener(keylistener);
            btnStop.setOnKeyEventListener(keylistener);
            btnSetting.setOnKeyEventListener(keylistener);
            surface.setOnKeyEventListener(keylistener);
            
            mb.config(1500, surface.getPlayer());
            
            volume.setOnMouseEventListener(volumelis);
            surface.setOnMouseEventListener(volumelis);

			
            treeWidget.setOnKeyEventListener(new onKeyEventListener(){
            	bool onKeyPress(QXObject obj,int key,bool repeat,int count,String text,int scanCode,int virtualKey,int modifier)override{
					if (key == Key_Escape){
						return false;
                    }
                    return true;
				}
            });
			btnOk.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					//String file = new String("http://cctvtxyh5c.liveplay.myqcloud.com/wstv/liaoning_2/index.m3u8".getBytes("GB18030"));
                    //setWindowTitle("D:\\Cadaqs\\Desktop\\7500-航班2014.hd.rmvb，http://cctvalih5c.v.myalicdn.com/live/cctv1_1/index.m3u8");
					//openMedia(file);
                    dopause();
                    /*if (b){
						btnOk.setCheck(!b);
						btnOk.setStyleSheetString("image: url(res/toolbar/play.png);");
                    }else{
						btnOk.setStyleSheetString("image: url(res/toolbar/pause.png);");
                    }*/
				}
			});
            
            btnSetting.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					/*QPoint pt = mapToGlobal(width() - 120,height() - 150);
					setdlg.show(pt.x,pt.y);*/
                    
                    setdlg.show(width() - 120,height() - 150);
				}
			});
            
            btnStop.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					dostop();
				}
			});
            
            btnHide.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					if (treeWidget.isHidden()){
						treeWidget.show();
                        btnHide.setText("<");
                    }else{
						treeWidget.hide();
                        btnHide.setText(">");
                    }
				}
			});
            
			btnLeft.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					codec.seek(mb.getPosition() - 10000);
				}
			});
            
			btnRight.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					codec.seek(mb.getPosition() + 10000);
				}
			});
            
            surface.setDragListener( new XVideoSurface.DropListener(){
				void onDrag(String file){
					openMedia(file, file.findFilenameAndExtension());
				}
			});
                        
            treeWidget.setOnTreeViewItemEvent(new onTreeViewItemEvent(){
               void onItemDoubleClicked(QXTreeView tree,long item, int column)override{
					try{
						String url = urisMap.get(item);
                        
                        url = url.replace("%(tempstamp)", "" + (_system_.currentTimeMillis() / 1000));
                        openMedia(url, tree.getItemText(item, 0));
                    }catch(Exception e){
                    
                    }
				}     
            });
            
            labStatus.setText("加载节目...");
            
            loadAct();
            
            setdlg.create(this);
            setdlg.hide();
            labStatus.setText("就绪");
            this.setFocus();
            createContextMenu(surface);
            return true;
		}
        return false;
	}


    void openForDialog(){
		InputDialog.requestInput(new InputDialog.onInputListener(){
			bool onInputOk(String text)override{
				if (text == nilptr || text.length() == 0){
					return false;
				}
				openMedia(text, text);
				return true;
			}
			bool onInputCancel()override{
				return true;
			}
			String getTitle()override{
				return "打开网络地址";
			}
			String getTips()override{
				return "媒体地址:";  
			} 
			String getDefault()override{
				return "http://";
			}
		});      
    }

    
    void setStatus(int s){
		runOnUi(new Runnable(){
			void run()override{
            
				switch(s){
					case 0: 
					case -1:
                    labStatus.setText("加载失败");
                    break;
					case 1:
                    labStatus.setText("正在缓冲...");
                    break;
                    case 2:
                    labStatus.setText("播放中");
                    break;
                }
			}
		});
    }
    
    void openMedia(String uri, String title){
		dostop();
        
		if (bStop == true){
			labStatus.show();
            if (title != nilptr){
				setWindowTitle("XPlayer - " + title);
            }
			new Thread(){
				void run()override{
					bStop = false;
					setName("Decoder");
					setStatus(1);
					
					if (codec.open(uri)){
					
						mb.create(); 
						//surface.resize(codec.getWidth(),codec.getHeight());
						long duration = codec.getDuration();
						szduration = formatTime(duration);
                        
						if (codec.prepare()){
							pane.config(uri, duration, codec);
                            bool ba = codec.hasAudio();
                            bool bv = codec.hasVideo();
                            
							runOnUi(new Runnable(){
								void run()override{
									if (bv == false){
										labStatus.hide();
                                        /*volume.resize(30,15);
                                        MainDialog.this.resize(300,150);*/
									}else{
										labStatus.show();
                                        //MainDialog.this.resize(480,320);
									}
                                    
								}
							});
						
							surface.setParameter(codec.getFps(),duration , codec.getWidth(),codec.getHeight(), ba, bv, playStatusListener);
							surface.startPlay();
							setStatus(2);
							codec.decode();
						}
					}else{
						bStop = true;
						setStatus(0);
					}
                     
                    synchronized(MainDialog.this){ 
						MainDialog.this.notify();
                    }  
				} 
			}.start();  
        }
    }
}; 


class XMyApp : QXApplication {
 
	MainDialog dialog;
	String fileargs;
	void preopen(String file){
		fileargs = (file);
    }
                 
    bool create(){                         
        if (super.createQXApplication()){
            dialog = new MainDialog();
            if (dialog.create()){
				String qsspath = XPlatform.getAppDirectory();
                qsspath = String.formatPath(qsspath.appendPath("/res/qss/black.qss"), false);
				setStyleSheet(qsspath);
                if (fileargs != nilptr && fileargs.length() > 0){
					dialog.openMedia(fileargs, fileargs);
                }
				dialog.show();
                return true;
            }
        }
        return false;
    }
    
};

    
int main(String [] args){
	XMyApp app = new XMyApp();
    _system_.chdir(_system_.getAppDirectory());
	if (args.length > 1){
		app.preopen(XPlatform.converPlatformCharSetTo(args[1]));
	}
    if (app.create()){
		app.run();
    }
	return 0;
}